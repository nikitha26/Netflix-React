{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prasad\\\\Desktop\\\\react\\\\netflix-react\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/w500/\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl); //console.log(request.data.results);\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  console.log(movies);\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row_poster ${isLargeRow && \"row_posterlarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","fetchData","request","get","data","results","console","log","opts","height","width","playerVars","autoplay","map","movie","poster_path","backdrop_path","name","id","trailerUrl"],"sources":["C:/Users/Prasad/Desktop/react/netflix-react/src/Row.js"],"sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/w500/\";\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n  const[movies, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      //console.log(request.data.results);\r\n      setMovies(request.data.results)\r\n      return request;\r\n    }\r\n    fetchData()\r\n  }, [fetchUrl]);\r\n \r\n  console.log(movies)\r\n  const opts = {\r\n    height: '390',\r\n    width: '100%',\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className='row'>\r\n    <h1>{title}</h1>\r\n    <div className='row_posters'>\r\n      {movies.map(movie => (\r\n        <img \r\n          key={movie.id}\r\n          className={`row_poster ${isLargeRow && \"row_posterlarge\"}`}\r\n          src={`${base_url}${\r\n          isLargeRow? movie.poster_path : movie.backdrop_path}`} alt={movie.name}\r\n        />\r\n      ))}\r\n    </div>\r\n       <YouTube videoId={trailerUrl} opts={opts} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Row"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,MAAMC,QAAQ,GAAG,kCAAjB;;AAEA,SAASC,GAAT,OAA4C;EAAA;;EAAA,IAA/B;IAACC,KAAD;IAAQC,QAAR;IAAkBC;EAAlB,CAA+B;EAC1C,MAAK,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAAnC;EAEAC,SAAS,CAAC,MAAM;IACd,eAAeW,SAAf,GAA2B;MACzB,MAAMC,OAAO,GAAG,MAAMX,KAAK,CAACY,GAAN,CAAUN,QAAV,CAAtB,CADyB,CAEzB;;MACAG,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;MACA,OAAOH,OAAP;IACD;;IACDD,SAAS;EACV,CARQ,EAQN,CAACJ,QAAD,CARM,CAAT;EAUAS,OAAO,CAACC,GAAR,CAAYR,MAAZ;EACA,MAAMS,IAAI,GAAG;IACXC,MAAM,EAAE,KADG;IAEXC,KAAK,EAAE,MAFI;IAGXC,UAAU,EAAE;MACV;MACAC,QAAQ,EAAE;IAFA;EAHD,CAAb;EASA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACA;MAAA,UAAKhB;IAAL;MAAA;MAAA;MAAA;IAAA,QADA,eAEA;MAAK,SAAS,EAAC,aAAf;MAAA,UACGG,MAAM,CAACc,GAAP,CAAWC,KAAK,iBACf;QAEE,SAAS,EAAG,cAAahB,UAAU,IAAI,iBAAkB,EAF3D;QAGE,GAAG,EAAG,GAAEJ,QAAS,GACjBI,UAAU,GAAEgB,KAAK,CAACC,WAAR,GAAsBD,KAAK,CAACE,aAAc,EAJtD;QAIyD,GAAG,EAAEF,KAAK,CAACG;MAJpE,GACOH,KAAK,CAACI,EADb;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QAFA,eAYG,QAAC,OAAD;MAAS,OAAO,EAAEC,UAAlB;MAA8B,IAAI,EAAEX;IAApC;MAAA;MAAA;MAAA;IAAA,QAZH;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAgBD;;GAvCQb,G;;KAAAA,G;AAyCT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}