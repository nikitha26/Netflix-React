{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Prasad\\\\Desktop\\\\react\\\\netflix-react\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/w500/\";\n\nfunction Row(_ref) {\n  _s();\n\n  let {\n    title,\n    fetchUrl,\n    isLargeRow\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl); //console.log(request.data.results);\n\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]); //console.log(movies)\n\n  const opts = {\n    height: '390',\n    width: '100%',\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        //https://www.youtube.com/watch?v=XtMThy8QKqU&t=268s\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get(\"v\"));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row_poster ${isLargeRow && \"row_posterlarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","id"],"sources":["C:/Users/Prasad/Desktop/react/netflix-react/src/Row.js"],"sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/w500/\";\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n  const[movies, setMovies] = useState([]);\r\n  const[trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      //console.log(request.data.results);\r\n      setMovies(request.data.results)\r\n      return request;\r\n    }\r\n    fetchData()\r\n  }, [fetchUrl]);\r\n \r\n  //console.log(movies)\r\n  const opts = {\r\n    height: '390',\r\n    width: '100%',\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n const handleClick = (movie) => {\r\n   if(trailerUrl){\r\n     setTrailerUrl('')\r\n   }else {\r\n    movieTrailer(movie?.name || \"\")\r\n    .then((url) => {\r\n      //https://www.youtube.com/watch?v=XtMThy8QKqU&t=268s\r\n       const urlParams = new URLSearchParams(new URL(url).search);\r\n       setTrailerUrl(urlParams.get(\"v\"));\r\n    })\r\n    .catch((error) => console.log(error))\r\n   }\r\n }\r\n  return (\r\n    <div className='row'>\r\n    <h1>{title}</h1>\r\n    <div className='row_posters'>\r\n      {movies.map(movie => (\r\n        <img \r\n          key={movie.id}\r\n          onClick = {() => handleClick(movie)}\r\n          className={`row_poster ${isLargeRow && \"row_posterlarge\"}`}\r\n          src={`${base_url}${\r\n          isLargeRow? movie.poster_path : movie.backdrop_path}`} alt={movie.name}\r\n        />\r\n      ))}\r\n    </div>\r\n       {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Row"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAEA,MAAMC,QAAQ,GAAG,kCAAjB;;AAEA,SAASC,GAAT,OAA4C;EAAA;;EAAA,IAA/B;IAACC,KAAD;IAAQC,QAAR;IAAkBC;EAAlB,CAA+B;EAC1C,MAAK,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAAnC;EACA,MAAK,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA3C;EAEAC,SAAS,CAAC,MAAM;IACd,eAAea,SAAf,GAA2B;MACzB,MAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUR,QAAV,CAAtB,CADyB,CAEzB;;MACAG,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;MACA,OAAOH,OAAP;IACD;;IACDD,SAAS;EACV,CARQ,EAQN,CAACN,QAAD,CARM,CAAT,CAJ0C,CAc1C;;EACA,MAAMW,IAAI,GAAG;IACXC,MAAM,EAAE,KADG;IAEXC,KAAK,EAAE,MAFI;IAGXC,UAAU,EAAE;MACV;MACAC,QAAQ,EAAE;IAFA;EAHD,CAAb;;EAQD,MAAMC,WAAW,GAAIC,KAAD,IAAW;IAC7B,IAAGb,UAAH,EAAc;MACZC,aAAa,CAAC,EAAD,CAAb;IACD,CAFD,MAEM;MACLT,YAAY,CAAC,CAAAqB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAe,EAAhB,CAAZ,CACCC,IADD,CACOC,GAAD,IAAS;QACb;QACC,MAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;QACAnB,aAAa,CAACgB,SAAS,CAACb,GAAV,CAAc,GAAd,CAAD,CAAb;MACF,CALD,EAMCiB,KAND,CAMQC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CANlB;IAOA;EACF,CAZD;;EAaC,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACA;MAAA,UAAK3B;IAAL;MAAA;MAAA;MAAA;IAAA,QADA,eAEA;MAAK,SAAS,EAAC,aAAf;MAAA,UACGG,MAAM,CAAC2B,GAAP,CAAWZ,KAAK,iBACf;QAEE,OAAO,EAAI,MAAMD,WAAW,CAACC,KAAD,CAF9B;QAGE,SAAS,EAAG,cAAahB,UAAU,IAAI,iBAAkB,EAH3D;QAIE,GAAG,EAAG,GAAEJ,QAAS,GACjBI,UAAU,GAAEgB,KAAK,CAACa,WAAR,GAAsBb,KAAK,CAACc,aAAc,EALtD;QAKyD,GAAG,EAAEd,KAAK,CAACC;MALpE,GACOD,KAAK,CAACe,EADb;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QAFA,EAaI5B,UAAU,iBAAI,QAAC,OAAD;MAAS,OAAO,EAAEA,UAAlB;MAA8B,IAAI,EAAEO;IAApC;MAAA;MAAA;MAAA;IAAA,QAblB;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAiBD;;GArDQb,G;;KAAAA,G;AAuDT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}